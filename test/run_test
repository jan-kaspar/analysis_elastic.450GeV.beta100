#!/bin/bash

function FixmeCheck()
{
	output=`grep -RlI "FIXME" . 2> /dev/null  | grep -v "OLD\|.git\|.tex\|.log\|test/run_test"`
	if [ -n "$output" ]
	then
		echo "There are FIXMEs in the code."
		echo "<li>FAILED</li>" >> "$report"
		return 1
	fi

	echo "<li>OK</li>" >> "$report"
}

#----------------------------------------------------------------------------------------------------

function TodoCheck()
{
	n_TODO=`grep -RlI "TODO" . 2> /dev/null  | grep -v "OLD\|.git\|.tex\|.log\|test/run_test" |wc -l`

	if [ "$n_TODO" -eq "0" ]
	then
		echo "<li>OK</li>" >> "$report"
	else
		echo "<li>$n_TODO files affected</li>" >> "$report"
	fi
}

#----------------------------------------------------------------------------------------------------

function Compilation()
{
	./configure || exit 3
	make -j8 || exit 4

	echo "<li>OK</li>" >> "$report"
}

#----------------------------------------------------------------------------------------------------

function StaticAnalysisCheck()
{
	# TODO:
	echo "not yet implemented"
}

#----------------------------------------------------------------------------------------------------

function MainAnalysis()
{
	./run -wait "distill.cc" "data/$ds" || exit 10
	./run -wait "distill.cc" "data/$ds" -danti || exit 11

	./run -wait "distributions.cc" "data/$ds" -O "-bootstrap 1 -details 5" || exit 12

	./run -wait "resolution_fit.cc" "data/$ds" || exit 13

	# TODO: uncomment once the RP directory is restored
	#./run -wait "process_timber.cc" "data/$ds" || exit 20

	./run -wait "alignment.cc" "data/$ds" || exit 21
	./run -wait "alignment_fit.cc" "data/$ds" || exit 22

	./run -wait "eff3outof4.cc" "data/$ds" || exit 23
	./run -wait "eff3outof4_details.cc" "data/$ds" || exit 24
	./run -wait "eff3outof4_fit.cc" "data/$ds" || exit 25

	./run -wait "pileup.cc" "data/$ds" || exit 26

	#./run -wait "unfolding_cf_mc.cc" "data/$ds" || exit 27
	./run -wait "unfolding_cf_ni.cc" "data/$ds" || exit 28

	./run -wait "distributions_anti.cc" "data/$ds" -danti || exit 29

	./run -wait "distributions.cc" "data/$ds" || exit 30

	./run -wait "alignment_final.cc" "data/$ds" || exit 31

	data/merge -entry "data/$ds/,1,test,1" -output "data/merged.root" &> "data/merge.log" || exit 40

	echo "<li>OK</li>" >> "$report"
}

#----------------------------------------------------------------------------------------------------

function ResetComparisonResults()
{
	n_diff="0"
	failed_comparisons=""
}

#----------------------------------------------------------------------------------------------------

function MakeOneComparison()
{
	local file="$1"
	local obj="$2"
	local options="$3"

	local file1="./data/$ds/$file"
	local file2="$reference_directory/data/$ds/$file"
	if [ "$options" == "global" ]
	then
		file1="$file"
		file2="$reference_directory/$file"
	fi

	local plot_file="cmp_${file}_${obj}"
	plot_file="${plot_file//./_}"
	plot_file="${plot_file//\//_}"
	plot_file="${plot_file// /_}"
	plot_file="${plot_file}.png"

	test/compare "$file1" "$obj" "$file2" "$obj" "$plot_file"
	res="$?"

	if [ ! "$res" -eq "0" ]
	then
		let n_diff+=1

		diff_msg=""
		if [ "$res" -eq "1" ]; then diff_msg="number of points"; fi
		if [ "$res" -eq "2" ]; then diff_msg="major"; fi
		if [ "$res" -eq "3" ]; then diff_msg="minor"; fi

		failed_comparisons="${failed_comparisons}    <li>$file, $obj ($diff_msg, <a href="$plot_file">plot</a>)</li>\n"
	fi
}

#----------------------------------------------------------------------------------------------------

function MainAnalysisComparison()
{
	ResetComparisonResults

	if [ "$reference_directory" == "none" ]
	then
		echo "<li>not run - missing reference</li>" >> "$report"

		return 1
	else
		MakeOneComparison "alignment.root" "global/L_1_F/a"
		MakeOneComparison "alignment.root" "global/L_1_F/b"
		MakeOneComparison "alignment.root" "global/L_1_F/c"
		MakeOneComparison "alignment.root" "global/R_2_F/a"
		MakeOneComparison "alignment.root" "global/R_2_F/b"
		MakeOneComparison "alignment.root" "global/R_2_F/c"

		MakeOneComparison "alignment_final.root" "diff map"

		MakeOneComparison "alignment_fit.root" "L_2_F/a_fit"
		MakeOneComparison "alignment_fit.root" "L_2_F/b_fit"
		MakeOneComparison "alignment_fit.root" "L_2_F/c_fit"
		MakeOneComparison "alignment_fit.root" "R_1_F/a_fit"
		MakeOneComparison "alignment_fit.root" "R_1_F/b_fit"
		MakeOneComparison "alignment_fit.root" "R_1_F/c_fit"

		MakeOneComparison "distributions_45b_56t.root" "elastic cuts/cut 1/h_cq1"
		MakeOneComparison "distributions_45b_56t.root" "elastic cuts/cut 2/h_cq2"
		MakeOneComparison "distributions_45b_56t.root" "acceptance correction/eb/h_t_after"
		MakeOneComparison "distributions_45b_56t.root" "normalization+unfolding/eb/h_t_normalized_unsmeared"
		MakeOneComparison "distributions_45t_56b.root" "elastic cuts/cut 1/h_cq1"
		MakeOneComparison "distributions_45t_56b.root" "elastic cuts/cut 2/h_cq2"
		MakeOneComparison "distributions_45t_56b.root" "acceptance correction/eb/h_t_after"
		MakeOneComparison "distributions_45t_56b.root" "normalization+unfolding/eb/h_t_normalized_unsmeared"

		MakeOneComparison "distributions_anti_45b_56b.root" "acceptance correction/eb/h_t_after"
		MakeOneComparison "distributions_anti_45t_56t.root" "acceptance correction/eb/h_t_after"

		MakeOneComparison "eff3outof4_45b_56t.root" "excluded RPs L_2_F/n_si 3.0/th_y dependence/h_refined_ratio.th_y"
		MakeOneComparison "eff3outof4_45b_56t.root" "excluded RPs R_1_F/n_si 3.0/th_y dependence/h_refined_ratio.th_y"
		MakeOneComparison "eff3outof4_45t_56b.root" "excluded RPs L_2_F/n_si 3.0/th_y dependence/h_refined_ratio.th_y"
		MakeOneComparison "eff3outof4_45t_56b.root" "excluded RPs R_1_F/n_si 3.0/th_y dependence/h_refined_ratio.th_y"

		MakeOneComparison "eff3outof4_details.root" "45b_56t/L_1_F/track/th_y : rel"
		MakeOneComparison "eff3outof4_details.root" "45b_56t/R_2_F/track/th_y : rel"
		MakeOneComparison "eff3outof4_details.root" "45t_56b/L_1_F/track/th_y : rel"
		MakeOneComparison "eff3outof4_details.root" "45t_56b/R_2_F/track/th_y : rel"

		MakeOneComparison "eff3outof4_fit.root" "45b_56t/L_2_F/h_refined_ratio.th_y"
		MakeOneComparison "eff3outof4_fit.root" "45b_56t/L_1_F/h_refined_ratio.th_y"
		MakeOneComparison "eff3outof4_fit.root" "45b_56t/R_1_F/h_refined_ratio.th_y"
		MakeOneComparison "eff3outof4_fit.root" "45b_56t/R_2_F/h_refined_ratio.th_y"

		MakeOneComparison "pileup_combined.root" "45b_56t/dgn/pat_suff_destr && pat_suff_destr, L || R/rel"
		MakeOneComparison "pileup_combined.root" "45t_56b/dgn/pat_suff_destr && pat_suff_destr, L || R/rel"

		MakeOneComparison "resolution_fit_45b_56t.root" "d_x/g_fits"
		MakeOneComparison "resolution_fit_45b_56t.root" "d_y/g_fits"
		MakeOneComparison "resolution_fit_45t_56b.root" "d_x/g_fits"
		MakeOneComparison "resolution_fit_45t_56b.root" "d_y/g_fits"

		MakeOneComparison "unfolding_cf_ni_45b_56t.root" "fit-1/eb"
		MakeOneComparison "unfolding_cf_ni_45t_56b.root" "fit-1/eb"

		MakeOneComparison "data/merged.root" "eb/merged/combined/h_dsdt" "global"

		if [ "$n_diff" -eq "0" ]
		then
			echo "<li>OK</li>" >> "$report"
		else
			echo "<li>$n_diff differences:</li>" >> "$report"
			echo "<ul>" >> "$report"
			echo -e "$failed_comparisons" >> "$report"
			echo "</ul>" >> "$report"

			return 2
		fi
	fi
}

#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------

# defaults
ds="fill7281/Totem1"

steps="
 FixmeCheck
 TodoCheck
 Compilation
 StaticAnalysisCheck
 MainAnalysis
 MainAnalysisComparison
"
reference_directory=""
report="test.log_short.html"

# parse command line
while [ -n "$1" ]
do
	case "$1" in
		"-ref")
			shift
			reference_directory="$1"
			;;

		"-steps")
			shift
			steps="$1"
			;;

		"-report")
			shift
			report="$1"
			;;

		*)
			echo "Unknown parameter: '%s'"
			exit 1
	esac

	shift
done

# adjust settings
if [ -z "$reference_directory" ]
then
	reference_directory=`ls -d /afs/cern.ch/user/j/jkaspar/www/IB/es_450GeV_beta100_4rp/*/|tail -n 1`
	echo "* setting default reference directory: $reference_directory"
fi

# initialisation
rm -f "$report"

(
	echo "<html>"
	echo "<body>"
	echo "<ul>"
	echo "<li>starting test at: $(pwd -P)</li>"
	echo "<li>reference directory: $reference_directory</li>"
) >> "$report"

# prepare environment
source environment || exit 1

# run steps
failure="False"
for step in $steps
do
	echo "----- $step --------------------------------------------------"

	echo "<li>$step</li>" >> "$report"
	echo "<ul>" >> "$report"

	$step
	if [ "$?" -ne "0" ]
	then
		failure="True"
		break
	fi

	echo "</ul>" >> "$report"
done

# finalisation
(
	echo "</ul>"
	echo "</body>"
	echo "</html>"
) >> "$report"

if [ "$failure" == "True" ]
then
	exit 10
fi